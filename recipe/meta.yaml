{% set version = "0.9.1" %}
{% set build = 0 %}

package:
  name: pygetm
  version: {{ version }}

source:
  #git_url: https://github.com/BoldingBruggeman/getm-rewrite.git
  url: https://github.com/BoldingBruggeman/getm-rewrite/releases/download/v{{ version }}/code.tar.gz
  sha256: 1673cc98bf0d660deb3a00b1c077cc93d5285c6ce717ded2f270cbcdca00e1af

build:
  number: {{ build }}
  #skip: true  # [win]
  entry_points:
    - pygetm-subdiv = pygetm.subdiv:main
    - pygetm-test-scaling = pygetm.parallel:test_scaling_command
    - pygetm-compare-nc = pygetm.util.compare_nc:compare_command

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - cmake
    - make                                   # [not win]
    - {{ compiler('c') }}                    # [not win] NB on windows this would activate Visual Studio and make that the default C/C++ compiler
    - {{ compiler('fortran') }}              # [not win]
    - {{ stdlib("c") }}                      # [not win] on Windows this pulls in VS and causes cmake to use its cl.exe, which is incompatible with the m2w64 version of windres.exe
    #- {{ compiler('m2w64_c') }}              # [win]
    #- {{ compiler('m2w64_fortran') }}        # [win]
    #- {{ stdlib("m2w64_c") }}                # [win]
    - {{ compiler('c') }}                    # [win] to find VS
    #- {{ stdlib("c") }}                      # [win]
  host:
    - python {{ python }}
    - cython
    - pip
    - setuptools
    - numpy
    #- libpython                  # [win]
  run:
    - python
    - pyyaml
    - xarray
    - netcdf4
    - scipy
    - pyfabm >=2.1
    - awex
    - pygotm
    - mpi4py
    #- msmpi  #[win]
    #- m2w64-gcc-libgfortran      # [win] NB m2w64-gcc-libs and m2w64-gcc-libs-core are added automatically by m2w64 compiler functions under build


test:
  requires:
    #- scipy
    #- git
    #- git-lfs
  imports:
    - pygetm
  commands:
    - pygetm-subdiv -h
    - pygetm-test-scaling -h
    - pygetm-compare-nc -h
    - git clone --depth 1 https://git.code.sf.net/p/getm/getm-setups
    - set GETM_SETUPS_DIR=./getm-setups      # [win]
    - export GETM_SETUPS_DIR=./getm-setups   # [unix]
    - python -m unittest discover -s python/tests -v
  source_files:
    - python/tests/*.py
    - python/examples/north_sea.py

about:
  home: https://github.com/BoldingBruggeman/getm-rewrite
  summary: 'Python implementation of the General Estuarine Transport Model'
  description: |
    Rewrite of the General Estuarine Transport Model (GETM) in Python (mostly)
    and Fortran (performance-critical sections)
  license: GPL-2.0-only
  license_family: GPL
  license_file: Copyright

extra:
  recipe-maintainers:
    - jornbr
